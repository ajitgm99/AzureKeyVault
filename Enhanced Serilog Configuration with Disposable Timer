Here's the complete implementation with all files for both projects, including the disposable timer functionality:

Complete Solution Structure
Solution/
├── Common.Logging/
│   ├── Enrichers/
│   │   ├── TimeTakenEnricher.cs
│   │   ├── RequestPathEnricher.cs
│   ├── Extensions/
│   │   ├── SerilogExtensions.cs
│   ├── Utilities/
│   │   ├── DisposableTimer.cs
│   ├── SerilogConfig.cs
│   ├── Common.Logging.csproj
├── WebApi/
│   ├── Controllers/
│   │   ├── TestController.cs
│   ├── Program.cs
│   ├── WebApi.csproj
1. Common.Logging (Class Library)
Common.Logging.csproj
xml
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Logging" Version="8.0.0" />
    <PackageReference Include="Serilog" Version="3.1.1" />
    <PackageReference Include="Serilog.AspNetCore" Version="8.0.1" />
    <PackageReference Include="Serilog.Sinks.Console" Version="4.2.0" />
  </ItemGroup>
</Project>
Enrichers/TimeTakenEnricher.cs
csharp
using Serilog.Core;
using Serilog.Events;
using System.Diagnostics;

namespace Common.Logging.Enrichers;

public class TimeTakenEnricher : ILogEventEnricher
{
    private readonly Stopwatch _stopwatch;

    public TimeTakenEnricher()
    {
        _stopwatch = Stopwatch.StartNew();
    }

    public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)
    {
        var elapsedMs = _stopwatch.ElapsedMilliseconds;
        var property = propertyFactory.CreateProperty("TimeTakenMs", elapsedMs);
        logEvent.AddPropertyIfAbsent(property);
    }
}
Enrichers/RequestPathEnricher.cs
csharp
using Microsoft.AspNetCore.Http;
using Serilog.Core;
using Serilog.Events;
using System.Security.Claims;

namespace Common.Logging.Enrichers;

public class RequestPathEnricher : ILogEventEnricher
{
    private readonly IHttpContextAccessor _httpContextAccessor;

    public RequestPathEnricher(IHttpContextAccessor httpContextAccessor)
    {
        _httpContextAccessor = httpContextAccessor;
    }

    public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)
    {
        var httpContext = _httpContextAccessor.HttpContext;
        if (httpContext == null) return;

        var requestPath = httpContext.Request.Path;
        logEvent.AddPropertyIfAbsent(propertyFactory.CreateProperty("RequestPath", requestPath));

        var endpoint = httpContext.GetEndpoint();
        if (endpoint != null)
        {
            var actionDescriptor = endpoint.Metadata.GetMetadata<Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor>();
            if (actionDescriptor != null)
            {
                logEvent.AddPropertyIfAbsent(propertyFactory.CreateProperty("ActionPath", 
                    $"{actionDescriptor.ControllerName}.{actionDescriptor.ActionName}"));
            }
        }
    }
}
Extensions/SerilogExtensions.cs
csharp
using Common.Logging.Enrichers;
using Serilog;

namespace Common.Logging.Extensions;

public static class SerilogExtensions
{
    public static LoggerConfiguration WithBasicEnrichers(this LoggerConfiguration config)
    {
        return config
            .Enrich.WithProcessId()
            .Enrich.WithMachineName()
            .Enrich.With(new TimeTakenEnricher());
    }

    public static LoggerConfiguration WithWebApiEnrichers(this LoggerConfiguration config)
    {
        return config
            .WithBasicEnrichers()
            .Enrich.FromLogContext()
            .Enrich.With<RequestPathEnricher>();
    }
}
Utilities/DisposableTimer.cs
csharp
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Microsoft.Extensions.Logging;

namespace Common.Logging.Utilities;

public class DisposableTimer : IDisposable
{
    private readonly ILogger _logger;
    private readonly Stopwatch _stopwatch;
    private readonly string _operationName;
    private readonly LogLevel _logLevel;
    private readonly IDisposable _scope;

    public DisposableTimer(
        ILogger logger,
        string operationName,
        LogLevel logLevel = LogLevel.Information,
        params (string key, object value)[] properties)
    {
        _logger = logger;
        _operationName = operationName;
        _logLevel = logLevel;
        _stopwatch = Stopwatch.StartNew();
        
        _scope = _logger.BeginScope(
            properties.ToDictionary(
                x => x.key,
                x => x.value));
    }

    public void Dispose()
    {
        _stopwatch.Stop();
        _scope?.Dispose();
        
        _logger.Log(
            _logLevel,
            "Operation {OperationName} completed in {ElapsedMs}ms", 
            _operationName, 
            _stopwatch.ElapsedMilliseconds);
    }
}

public static class DisposableTimerExtensions
{
    public static DisposableTimer TimeOperation(
        this ILogger logger,
        string operationName,
        LogLevel logLevel = LogLevel.Information,
        params (string key, object value)[] properties)
    {
        return new DisposableTimer(logger, operationName, logLevel, properties);
    }
}
SerilogConfig.cs
csharp
using Common.Logging.Extensions;
using Serilog;

namespace Common.Logging;

public static class SerilogConfig
{
    public static ILogger CreateBootstrapLogger()
    {
        return new LoggerConfiguration()
            .WithBasicEnrichers()
            .WriteTo.Console(outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss} [{ProcessId}] {Message}{NewLine}{Exception}")
            .CreateBootstrapLogger();
    }

    public static IHostBuilder UseSerilogConfiguration(this IHostBuilder hostBuilder)
    {
        return hostBuilder.UseSerilog((context, services, configuration) => 
        {
            configuration
                .WithWebApiEnrichers()
                .WriteTo.Console(outputTemplate: 
                    "{Timestamp:yyyy-MM-dd HH:mm:ss} " +
                    "[{ProcessId}] " +
                    "[{RequestPath}] " +
                    "[{ActionPath}] " +
                    "{Message}{NewLine}{Exception}");
        });
    }
}
2. WebApi Project
WebApi.csproj
xml
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Serilog.AspNetCore" Version="8.0.1" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Common.Logging\Common.Logging.csproj" />
  </ItemGroup>
</Project>
Program.cs
csharp
using Common.Logging;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Host.UseSerilogConfiguration();
builder.Services.AddHttpContextAccessor();

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

app.Run();
Controllers/TestController.cs
csharp
using Common.Logging.Utilities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace WebApi.Controllers;

[ApiController]
[Route("[controller]")]
public class TestController : ControllerBase
{
    private readonly ILogger<TestController> _logger;

    public TestController(ILogger<TestController> logger)
    {
        _logger = logger;
    }

    [HttpGet]
    public IActionResult Get()
    {
        using (_logger.TimeOperation("TestController.Get", 
               properties: ("RequestId", Guid.NewGuid())))
        {
            // Simulate work
            Thread.Sleep(new Random().Next(50, 200));
            
            return Ok(new { Message = "Hello World", Timestamp = DateTime.UtcNow });
        }
    }

    [HttpGet("long")]
    public IActionResult GetLongRunning()
    {
        using (_logger.TimeOperation("LongRunningOperation", LogLevel.Warning,
               ("RequestId", Guid.NewGuid()),
               ("User", User.Identity?.Name ?? "anonymous")))
        {
            Thread.Sleep(1000);
            return Ok(new { Message = "Long operation completed" });
        }
    }
}
How to Use
Basic Usage:

csharp
using (_logger.TimeOperation("OperationName"))
{
    // Your code here
}
With Custom Log Level:

csharp
using (_logger.TimeOperation("CriticalOperation", LogLevel.Warning))
{
    // Critical operation
}
With Additional Properties:

csharp
using (_logger.TimeOperation("ProcessOrder", 
       properties: ("OrderId", orderId), ("Customer", customerName)))
{
    // Process order
}
Expected Output Examples
For /test endpoint:

2024-05-15 16:45:22 [54321] [/test] [Test.Get] Operation TestController.Get completed in 128ms
For /test/long endpoint:

2024-05-15 16:46:05 [54321] [/test/long] [Test.GetLongRunning] Operation LongRunningOperation completed in 1002ms
This complete implementation provides:

Structured logging with timestamps, process IDs, request paths, and action paths

Operation timing with the disposable timer pattern

Flexible logging with custom levels and additional properties

Clean separation between logging infrastructure and application code
************************************************************************************************************************************
Getting an error in SerilogExtension.cs - RequestpathEnchricher must be a non abstract type with a public paramterless constructor in orer to use it as parmeter 'Tenricher' in generic type or method 'loggerEnchrichmentconfiguratinon with <tenchircher>
The error occurs because Serilog's Enrich.With<TEnricher>() requires the enricher to have a parameterless constructor, but our RequestPathEnricher requires IHttpContextAccessor. Here's how to fix this:

Updated Solution
1. Modify the RequestPathEnricher registration
Extensions/SerilogExtensions.cs (updated):

csharp
using Common.Logging.Enrichers;
using Microsoft.AspNetCore.Http;
using Serilog;

namespace Common.Logging.Extensions;

public static class SerilogExtensions
{
    public static LoggerConfiguration WithBasicEnrichers(this LoggerConfiguration config)
    {
        return config
            .Enrich.WithProcessId()
            .Enrich.WithMachineName()
            .Enrich.With(new TimeTakenEnricher());
    }

    public static LoggerConfiguration WithWebApiEnrichers(this LoggerConfiguration config, IServiceProvider serviceProvider = null)
    {
        var enrichedConfig = config
            .WithBasicEnrichers()
            .Enrich.FromLogContext();

        if (serviceProvider != null)
        {
            var httpContextAccessor = serviceProvider.GetService<IHttpContextAccessor>();
            if (httpContextAccessor != null)
            {
                enrichedConfig = enrichedConfig
                    .Enrich.With(new RequestPathEnricher(httpContextAccessor));
            }
        }

        return enrichedConfig;
    }
}
2. Update SerilogConfig.cs
SerilogConfig.cs (updated):

csharp
using Common.Logging.Extensions;
using Serilog;

namespace Common.Logging;

public static class SerilogConfig
{
    public static ILogger CreateBootstrapLogger()
    {
        return new LoggerConfiguration()
            .WithBasicEnrichers()
            .WriteTo.Console(outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss} [{ProcessId}] {Message}{NewLine}{Exception}")
            .CreateBootstrapLogger();
    }

    public static IHostBuilder UseSerilogConfiguration(this IHostBuilder hostBuilder)
    {
        return hostBuilder.UseSerilog((context, services, configuration) => 
        {
            configuration
                .WithWebApiEnrichers(services)
                .WriteTo.Console(outputTemplate: 
                    "{Timestamp:yyyy-MM-dd HH:mm:ss} " +
                    "[{ProcessId}] " +
                    "[{RequestPath}] " +
                    "[{ActionPath}] " +
                    "{Message}{NewLine}{Exception}");
        });
    }
}
3. Keep RequestPathEnricher.cs the same
The RequestPathEnricher implementation remains unchanged:

csharp
using Microsoft.AspNetCore.Http;
using Serilog.Core;
using Serilog.Events;

namespace Common.Logging.Enrichers;

public class RequestPathEnricher : ILogEventEnricher
{
    private readonly IHttpContextAccessor _httpContextAccessor;

    public RequestPathEnricher(IHttpContextAccessor httpContextAccessor)
    {
        _httpContextAccessor = httpContextAccessor;
    }

    public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)
    {
        var httpContext = _httpContextAccessor.HttpContext;
        if (httpContext == null) return;

        var requestPath = httpContext.Request.Path;
        logEvent.AddPropertyIfAbsent(propertyFactory.CreateProperty("RequestPath", requestPath));

        var endpoint = httpContext.GetEndpoint();
        if (endpoint != null)
        {
            var actionDescriptor = endpoint.Metadata.GetMetadata<Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor>();
            if (actionDescriptor != null)
            {
                logEvent.AddPropertyIfAbsent(propertyFactory.CreateProperty("ActionPath", 
                    $"{actionDescriptor.ControllerName}.{actionDescriptor.ActionName}"));
            }
        }
    }
}
Key Changes Made:
Removed generic With<TEnricher> usage and replaced it with direct instantiation

Added IServiceProvider parameter to WithWebApiEnrichers to resolve dependencies

Manually create enricher instance with its required dependencies

Conditional registration of the RequestPathEnricher only when IHttpContextAccessor is available

Why This Works:
We're no longer relying on Serilog's automatic instantiation of the enricher

We're manually creating the enricher with its required dependencies

The enricher is only registered when running in a web context where IHttpContextAccessor is available

During application startup, the service provider is available to resolve dependencies

This approach maintains all the functionality while properly handling the dependency injection requirements of the RequestPathEnricher.
************************************************************************************************************************************
1. Update DisposableTimer.cs
csharp
using System;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.Extensions.Logging;
using Serilog;
using Serilog.Context;

namespace Common.Logging.Utilities;

public class DisposableTimer : IDisposable
{
    private readonly ILogger _logger;
    private readonly Stopwatch _stopwatch;
    private readonly string _operationName;
    private readonly LogLevel _logLevel;
    private readonly IDisposable _logContext;

    public DisposableTimer(
        ILogger logger,
        string operationName,
        LogLevel logLevel = LogLevel.Information,
        params (string key, object value)[] properties)
    {
        _logger = logger;
        _operationName = operationName;
        _logLevel = logLevel;
        _stopwatch = Stopwatch.StartNew();
        
        // Create a dictionary of properties
        var propsDict = new Dictionary<string, object>();
        foreach (var (key, value) in properties)
        {
            propsDict[key] = value;
        }
        
        // Create log context with properties
        _logContext = LogContext.PushProperties(propsDict);
    }

    public void Dispose()
    {
        _stopwatch.Stop();
        using (_logContext)
        {
            _logger.Log(
                _logLevel,
                "Operation {OperationName} completed in {ElapsedMs}ms", 
                _operationName, 
                _stopwatch.ElapsedMilliseconds);
        }
    }
}

public static class DisposableTimerExtensions
{
    public static DisposableTimer TimeOperation(
        this ILogger logger,
        string operationName,
        LogLevel logLevel = LogLevel.Information,
        params (string key, object value)[] properties)
    {
        return new DisposableTimer(logger, operationName, logLevel, properties);
    }
}
2. Update SerilogConfig.cs
csharp
using Common.Logging.Extensions;
using Serilog;
using Serilog.Formatting;
using Serilog.Formatting.Display;

namespace Common.Logging;

public static class SerilogConfig
{
    public static ILogger CreateBootstrapLogger()
    {
        return new LoggerConfiguration()
            .WithBasicEnrichers()
            .WriteTo.Console(outputTemplate: 
                "{Timestamp:yyyy-MM-dd HH:mm:ss} [{ProcessId}] {Message} {Properties}{NewLine}{Exception}")
            .CreateBootstrapLogger();
    }

    public static IHostBuilder UseSerilogConfiguration(this IHostBuilder hostBuilder)
    {
        return hostBuilder.UseSerilog((context, services, configuration) => 
        {
            configuration
                .WithWebApiEnrichers(services)
                .WriteTo.Console(
                    outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss} " +
                                  "[{ProcessId}] " +
                                  "[{RequestPath}] " +
                                  "[{ActionPath}] " +
                                  "{Message} " +
                                  "Properties: {Properties}{NewLine}{Exception}");
        });
    }
}
3. Update TestController.cs Example
csharp
[HttpGet("order/{orderId}")]
public IActionResult ProcessOrder(int orderId)
{
    var customerName = "John Doe"; // In reality, this would come from your data
    
    using (_logger.TimeOperation("ProcessOrder", 
           properties: ("OrderId", orderId), 
                   ("Customer", customerName),
                   ("Status", "Processing")))
    {
        // Simulate order processing
        Thread.Sleep(new Random().Next(50, 200));
        
        return Ok(new { 
            OrderId = orderId, 
            Status = "Processed",
            Customer = customerName 
        });
    }
}
